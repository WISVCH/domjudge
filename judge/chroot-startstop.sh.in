#!/bin/sh

# @configure_input@

# Script to setup chroot environment extras needed for non-statically
# compiled languages, such as Java, Python and other interpreted languages.
#
# The basic chroot environment contains nothing but a POSIX shell.
# This script will (bind) mount a minimal set of subdirectories from a
# pre-built chroot tree into the actual chroot environment that is
# created for each judging (as well as the proc FS and a few device
# files). Afterwards it is also called to cleanup.
#
# You can adapt this script to your environment, e.g. if you need to make
# more/other subdirectories available in the chroot environment. Or
# make it a no-op if you only want the very basic chroot.
#
# See bin/dj_make_chroot.sh for a script to generate the
# chroot environment. Note that if you modify paths
# in this script, then the associated sudo rules (see
# etc/sudoers-domjudge) must also be updated.
#
# This script will be called from judgedaemon.main.php in the root
# directory of the chroot environment with one parameter, either:
# - 'check' to perform some sanity checks;
# - 'start' to setup; or
# - 'stop' to destroy the chroot environment.
#
# We always use 'sudo -n <command> < /dev/null' to make sure that sudo
# doesn't try to ask for a password, but just fails.

# Exit on error:
set -e

# Chroot subdirs needed: (optional lib64 only needed for amd64 architecture)
SUBDIRMOUNTS="etc usr lib lib64 bin"

# Location of the pre-built chroot tree and where to bind mount from:
CHROOTORIGINAL="@judgehost_chrootdir@"

dj_umount() {
	set +e
	if ! sudo -n umount "$1" < /dev/null; then
		>&2 echo "umount '$1' didn't succeed, trying harder"
		if ! sudo -n umount -f -vvv "$1" < /dev/null; then
			>&2 echo "umount '$1' failed twice"
			>&2 lsof +c 15 +D "$1"
			exit 1
		fi
	fi
	set -e
}

case "$1" in
	check)
		echo "Dummy check chroot"
		;;
	start)
		echo "Dummy start chroot"
		;;
	stop)
		echo "Dummy stop chroot"
		;;

	*)
		echo "Unknown argument '$1' given."
		exit 1
esac

exit 0
